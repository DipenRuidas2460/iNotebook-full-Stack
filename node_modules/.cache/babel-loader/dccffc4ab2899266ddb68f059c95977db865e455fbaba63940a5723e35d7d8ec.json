{"ast":null,"code":"var _jsxFileName = \"/home/dipen/PenDrive/WebSite/ReactJS/inotebook/src/context/notes/NoteState.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport noteContext from \"./noteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = `http://localhost:3001`;\n  const initialNotes = [];\n  const [notes, setNotes] = useState(initialNotes);\n\n  // const s1 = {\n  //     \"name\": \"Dipen\",\n  //     \"class\": \"5b\"\n  // }\n  // const [state, setState] = useState(s1);\n\n  // const update = () => {\n  //     setTimeout(() => {\n  //         setState({\n  //            \"name\":\"pradip\",\n  //            \"class\":\"B.tech-4year\"\n  //         })\n  //     }, 1000);\n  // }\n\n  // --------------------- fetch all notes ---------------------\n\n  const getNotes = async () => {\n    const url = `${host}/getNotes`;\n    const response = await fetch(url, {\n      method: \"GET\",\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjQwMzY1NmM2YTE3YmZkZDhhZGFmMjg4In0sImF0IjoxNjc4MTcwMzA5LCJleHAiOjE2Nzg0Mjk1MDksImlhdCI6MTY3ODE3MDMwOX0.bun49XHrLttmWllKBC373Ue6Y3A35w1qQm245OtcksM\"\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n    setNotes(json);\n  };\n\n  // -----------------Add a Note--------------\n\n  const addNotes = async (title, description, tag) => {\n    const url = `${host}/createNotes`;\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjQwMzY1NmM2YTE3YmZkZDhhZGFmMjg4In0sImF0IjoxNjc4MTcwMzA5LCJleHAiOjE2Nzg0Mjk1MDksImlhdCI6MTY3ODE3MDMwOX0.bun49XHrLttmWllKBC373Ue6Y3A35w1qQm245OtcksM\"\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const note = await response.json();\n    con;\n    setNotes(notes.concat(note));\n  };\n\n  // -----------------Edit a Note-----------------------------\n\n  const editNotes = async (id, title, description, tag) => {\n    const url = `${host}/updateNotes/${id}`;\n    const response = await fetch(url, {\n      method: \"PUT\",\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjQwMzY1NmM2YTE3YmZkZDhhZGFmMjg4In0sImF0IjoxNjc4MTcwMzA5LCJleHAiOjE2Nzg0Mjk1MDksImlhdCI6MTY3ODE3MDMwOX0.bun49XHrLttmWllKBC373Ue6Y3A35w1qQm245OtcksM\"\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    await response.json();\n    let newNotes = JSON.parse(JSON.stringify(notes));\n\n    // Logic to edit client\n\n    for (let index = 0; index < newNotes.length; index++) {\n      const element = newNotes[index];\n      if (element._id === id) {\n        newNotes[index].title = title;\n        newNotes[index].description = description;\n        newNotes[index].tag = tag;\n        break;\n      }\n    }\n    setNotes(newNotes);\n  };\n\n  // -----------------Delete a Note---------------\n\n  const deleteNotes = async id => {\n    const url = `${host}/deleteNotes/${id}`;\n    const response = await fetch(url, {\n      method: \"DELETE\",\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjQwMzY1NmM2YTE3YmZkZDhhZGFmMjg4In0sImF0IjoxNjc4MTcwMzA5LCJleHAiOjE2Nzg0Mjk1MDksImlhdCI6MTY3ODE3MDMwOX0.bun49XHrLttmWllKBC373Ue6Y3A35w1qQm245OtcksM\"\n      }\n    });\n    await response.json();\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  };\n  return (\n    /*#__PURE__*/\n    // <noteContext.Provider value={{state:state, update:update}}>\n    //     {props.children}\n    // </noteContext.Provider>\n    _jsxDEV(noteContext.Provider, {\n      value: {\n        notes,\n        addNotes,\n        getNotes,\n        editNotes,\n        deleteNotes\n      },\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this)\n  );\n};\n_s(NoteState, \"U0gqYVJX8qasCuef0/bRvQrZ8LU=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","useState","noteContext","jsxDEV","_jsxDEV","NoteState","props","_s","host","initialNotes","notes","setNotes","getNotes","url","response","fetch","method","headers","json","console","log","addNotes","title","description","tag","body","JSON","stringify","note","con","concat","editNotes","id","newNotes","parse","index","length","element","_id","deleteNotes","filter","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/dipen/PenDrive/WebSite/ReactJS/inotebook/src/context/notes/NoteState.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport noteContext from \"./noteContext\";\n\nconst NoteState = (props) => {\n    const host = `http://localhost:3001`\n    const initialNotes = []\n    const [notes, setNotes] = useState(initialNotes)\n\n    // const s1 = {\n    //     \"name\": \"Dipen\",\n    //     \"class\": \"5b\"\n    // }\n    // const [state, setState] = useState(s1);\n\n    // const update = () => {\n    //     setTimeout(() => {\n    //         setState({\n    //            \"name\":\"pradip\",\n    //            \"class\":\"B.tech-4year\"\n    //         })\n    //     }, 1000);\n    // }\n\n\n    // --------------------- fetch all notes ---------------------\n\n    const getNotes = async () => {\n        const url = `${host}/getNotes`\n        const response = await fetch(url, {\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json',\n                'auth-token': \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjQwMzY1NmM2YTE3YmZkZDhhZGFmMjg4In0sImF0IjoxNjc4MTcwMzA5LCJleHAiOjE2Nzg0Mjk1MDksImlhdCI6MTY3ODE3MDMwOX0.bun49XHrLttmWllKBC373Ue6Y3A35w1qQm245OtcksM\"\n            }\n        });\n        const json = await response.json()\n        console.log(json)\n        setNotes(json)\n    }\n\n    // -----------------Add a Note--------------\n\n    const addNotes = async (title, description, tag) => {\n        const url = `${host}/createNotes`\n        const response = await fetch(url, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'auth-token': \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjQwMzY1NmM2YTE3YmZkZDhhZGFmMjg4In0sImF0IjoxNjc4MTcwMzA5LCJleHAiOjE2Nzg0Mjk1MDksImlhdCI6MTY3ODE3MDMwOX0.bun49XHrLttmWllKBC373Ue6Y3A35w1qQm245OtcksM\"\n            },\n            body: JSON.stringify({ title, description, tag })\n        })\n\n        const note = await response.json()\n        con\n        setNotes(notes.concat(note))\n    }\n\n\n    // -----------------Edit a Note-----------------------------\n\n    const editNotes = async (id, title, description, tag) => {\n        const url = `${host}/updateNotes/${id}`\n        const response = await fetch(url, {\n            method: \"PUT\",\n            headers: {\n                'Content-Type': 'application/json',\n                'auth-token': \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjQwMzY1NmM2YTE3YmZkZDhhZGFmMjg4In0sImF0IjoxNjc4MTcwMzA5LCJleHAiOjE2Nzg0Mjk1MDksImlhdCI6MTY3ODE3MDMwOX0.bun49XHrLttmWllKBC373Ue6Y3A35w1qQm245OtcksM\"\n            },\n\n            body: JSON.stringify({ title, description, tag })\n        })\n\n        await response.json()\n\n        let newNotes = JSON.parse(JSON.stringify(notes))\n\n        // Logic to edit client\n\n        for (let index = 0; index < newNotes.length; index++) {\n            const element = newNotes[index];\n            if (element._id === id) {\n                newNotes[index].title = title\n                newNotes[index].description = description\n                newNotes[index].tag = tag\n                break;\n            }\n        }\n        setNotes(newNotes);\n    }\n\n    // -----------------Delete a Note---------------\n\n    const deleteNotes = async (id) => {\n        const url = `${host}/deleteNotes/${id}`\n        const response = await fetch(url, {\n            method: \"DELETE\",\n            headers: {\n                'Content-Type': 'application/json',\n                'auth-token': \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjQwMzY1NmM2YTE3YmZkZDhhZGFmMjg4In0sImF0IjoxNjc4MTcwMzA5LCJleHAiOjE2Nzg0Mjk1MDksImlhdCI6MTY3ODE3MDMwOX0.bun49XHrLttmWllKBC373Ue6Y3A35w1qQm245OtcksM\"\n            }\n        })\n\n        await response.json()\n        const newNotes = notes.filter((note) => { return note._id !== id })\n        setNotes(newNotes)\n    }\n\n\n    return (\n        // <noteContext.Provider value={{state:state, update:update}}>\n        //     {props.children}\n        // </noteContext.Provider>\n        <noteContext.Provider value={{ notes, addNotes, getNotes, editNotes, deleteNotes }}>\n            {props.children}\n        </noteContext.Provider>\n    )\n}\n\n\nexport default NoteState;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}